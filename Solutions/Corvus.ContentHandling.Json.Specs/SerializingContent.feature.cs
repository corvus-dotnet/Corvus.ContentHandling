// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Corvus.ContentHandling.Json.Specs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Serializing content")]
    [NUnit.Framework.CategoryAttribute("setupContainer")]
    public partial class SerializingContentFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "setupContainer"};
        
#line 1 "SerializingContent.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Serializing content", "\tIn order to support polymorphic content type serialization\r\n\tAs a developer\r\n\tI " +
                    "want to be able to serialize polymorphic types to a JSON format", ProgrammingLanguage.CSharp, new string[] {
                        "setupContainer"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Serialize a polymorphic content object implementing a common interface")]
        public virtual void SerializeAPolymorphicContentObjectImplementingACommonInterface()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize a polymorphic content object implementing a common interface", null, tagsOfScenario, argumentsOfScenario);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue"});
                table21.AddRow(new string[] {
                            "Hello"});
#line 8
 testRunner.Given("I have an instance of a content object called \'item\' with content type \'applicati" +
                        "on/vnd.corvus.somecontentwithinterface\'", ((string)(null)), table21, "Given ");
#line hidden
#line 11
 testRunner.When("I serialize the content object called \'item\' as \'result\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.Then("the value called \'result\' should be a json object \'{ \"contentType\": \"application/" +
                        "vnd.corvus.somecontentwithinterface\", \"someValue\": \"Hello\" }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Serialize a polymorphic content object implementing a common interface with a nul" +
            "l polymorphic child object")]
        [NUnit.Framework.CategoryAttribute("useChildObjects")]
        public virtual void SerializeAPolymorphicContentObjectImplementingACommonInterfaceWithANullPolymorphicChildObject()
        {
            string[] tagsOfScenario = new string[] {
                    "useChildObjects"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize a polymorphic content object implementing a common interface with a nul" +
                    "l polymorphic child object", null, tagsOfScenario, argumentsOfScenario);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue",
                            "Child"});
                table22.AddRow(new string[] {
                            "Hello",
                            "null"});
#line 16
 testRunner.Given("I have an instance of a content object called \'item\' with content type \'applicati" +
                        "on/vnd.corvus.somecontentwithinterfaceandchild\'", ((string)(null)), table22, "Given ");
#line hidden
#line 19
 testRunner.When("I serialize the content object called \'item\' as \'result\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.Then("the value called \'result\' should be a json object \'{ \"contentType\": \"application/" +
                        "vnd.corvus.somecontentwithinterfaceandchild\", \"someValue\": \"Hello\" }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Serialize a polymorphic content object implementing a common interface with a pol" +
            "ymorphic child object")]
        [NUnit.Framework.CategoryAttribute("useChildObjects")]
        public virtual void SerializeAPolymorphicContentObjectImplementingACommonInterfaceWithAPolymorphicChildObject()
        {
            string[] tagsOfScenario = new string[] {
                    "useChildObjects"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize a polymorphic content object implementing a common interface with a pol" +
                    "ymorphic child object", null, tagsOfScenario, argumentsOfScenario);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue"});
                table23.AddRow(new string[] {
                            "Dolly"});
#line 24
 testRunner.Given("I have an instance of a content object called \'child\' with content type \'applicat" +
                        "ion/vnd.corvus.somecontentwithinterface\'", ((string)(null)), table23, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue",
                            "Child"});
                table24.AddRow(new string[] {
                            "Hello",
                            "{child}"});
#line 27
 testRunner.And("I have an instance of a content object called \'parent\' with content type \'applica" +
                        "tion/vnd.corvus.somecontentwithinterfaceandchild\'", ((string)(null)), table24, "And ");
#line hidden
#line 30
 testRunner.When("I serialize the content object called \'parent\' as \'result\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.Then("the value called \'result\' should be a json object \'{ \"contentType\": \"application/" +
                        "vnd.corvus.somecontentwithinterfaceandchild\", \"someValue\": \"Hello\", \"child\": { \"" +
                        "contentType\": \"application/vnd.corvus.somecontentwithinterface\", \"someValue\": \"D" +
                        "olly\" } }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Serialize a polymorphic content object implementing a common interface with a POC" +
            " child object")]
        [NUnit.Framework.CategoryAttribute("useChildObjects")]
        public virtual void SerializeAPolymorphicContentObjectImplementingACommonInterfaceWithAPOCChildObject()
        {
            string[] tagsOfScenario = new string[] {
                    "useChildObjects"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize a polymorphic content object implementing a common interface with a POC" +
                    " child object", null, tagsOfScenario, argumentsOfScenario);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue"});
                table25.AddRow(new string[] {
                            "Dolly"});
#line 35
 testRunner.Given("I have an instance of a poc object called \'child\'", ((string)(null)), table25, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue",
                            "Child"});
                table26.AddRow(new string[] {
                            "Hello",
                            "{child}"});
#line 38
 testRunner.And("I have an instance of a content object called \'parent\' with content type \'applica" +
                        "tion/vnd.corvus.somecontentwithinterfaceandpocchild\'", ((string)(null)), table26, "And ");
#line hidden
#line 41
 testRunner.When("I serialize the content object called \'parent\' as \'result\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then("the value called \'result\' should be a json object \'{ \"contentType\": \"application/" +
                        "vnd.corvus.somecontentwithinterfaceandpocchild\", \"someValue\": \"Hello\", \"child\": " +
                        "{ \"someValue\": \"Dolly\" } }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Serialize a polymorphic content object implementing a common abstract base")]
        public virtual void SerializeAPolymorphicContentObjectImplementingACommonAbstractBase()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize a polymorphic content object implementing a common abstract base", null, tagsOfScenario, argumentsOfScenario);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue"});
                table27.AddRow(new string[] {
                            "Hello"});
#line 47
 testRunner.Given("I have an instance of a content object called \'item\' with content type \'applicati" +
                        "on/vnd.corvus.somecontentwithabstractbase\'", ((string)(null)), table27, "Given ");
#line hidden
#line 50
 testRunner.When("I serialize the content object called \'item\' as \'result\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
 testRunner.Then("the value called \'result\' should be a json object \'{ \"contentType\": \"application/" +
                        "vnd.corvus.somecontentwithabstractbase\", \"someValue\": \"Hello\" }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Serialize a polymorphic content object implementing a common abstract base with a" +
            " null polymorphic child object")]
        [NUnit.Framework.CategoryAttribute("useChildObjects")]
        public virtual void SerializeAPolymorphicContentObjectImplementingACommonAbstractBaseWithANullPolymorphicChildObject()
        {
            string[] tagsOfScenario = new string[] {
                    "useChildObjects"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize a polymorphic content object implementing a common abstract base with a" +
                    " null polymorphic child object", null, tagsOfScenario, argumentsOfScenario);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue",
                            "Child"});
                table28.AddRow(new string[] {
                            "Hello",
                            "null"});
#line 55
 testRunner.Given("I have an instance of a content object called \'item\' with content type \'applicati" +
                        "on/vnd.corvus.somecontentwithabstractbaseandchild\'", ((string)(null)), table28, "Given ");
#line hidden
#line 58
 testRunner.When("I serialize the content object called \'item\' as \'result\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then("the value called \'result\' should be a json object \'{ \"contentType\": \"application/" +
                        "vnd.corvus.somecontentwithabstractbaseandchild\", \"someValue\": \"Hello\" }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Serialize a polymorphic content object implementing a common abstract base with a" +
            " polymorphic child object")]
        [NUnit.Framework.CategoryAttribute("useChildObjects")]
        public virtual void SerializeAPolymorphicContentObjectImplementingACommonAbstractBaseWithAPolymorphicChildObject()
        {
            string[] tagsOfScenario = new string[] {
                    "useChildObjects"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize a polymorphic content object implementing a common abstract base with a" +
                    " polymorphic child object", null, tagsOfScenario, argumentsOfScenario);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue"});
                table29.AddRow(new string[] {
                            "Dolly"});
#line 63
 testRunner.Given("I have an instance of a content object called \'child\' with content type \'applicat" +
                        "ion/vnd.corvus.somecontentwithabstractbase\'", ((string)(null)), table29, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue",
                            "Child"});
                table30.AddRow(new string[] {
                            "Hello",
                            "{child}"});
#line 66
 testRunner.And("I have an instance of a content object called \'parent\' with content type \'applica" +
                        "tion/vnd.corvus.somecontentwithabstractbaseandchild\'", ((string)(null)), table30, "And ");
#line hidden
#line 69
 testRunner.When("I serialize the content object called \'parent\' as \'result\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
 testRunner.Then(@"the value called 'result' should be a json object '{ ""contentType"": ""application/vnd.corvus.somecontentwithabstractbaseandchild"", ""someValue"": ""Hello"", ""child"": { ""contentType"": ""application/vnd.corvus.somecontentwithabstractbase"", ""someValue"": ""Dolly"" } }'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Serialize a polymorphic content object implementing a common abstract base with a" +
            " POC child object")]
        [NUnit.Framework.CategoryAttribute("useChildObjects")]
        public virtual void SerializeAPolymorphicContentObjectImplementingACommonAbstractBaseWithAPOCChildObject()
        {
            string[] tagsOfScenario = new string[] {
                    "useChildObjects"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize a polymorphic content object implementing a common abstract base with a" +
                    " POC child object", null, tagsOfScenario, argumentsOfScenario);
#line 73
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue"});
                table31.AddRow(new string[] {
                            "Dolly"});
#line 74
 testRunner.Given("I have an instance of a poc object called \'child\'", ((string)(null)), table31, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue",
                            "Child"});
                table32.AddRow(new string[] {
                            "Hello",
                            "{child}"});
#line 77
 testRunner.And("I have an instance of a content object called \'parent\' with content type \'applica" +
                        "tion/vnd.corvus.somecontentwithabstractbaseandpocchild\'", ((string)(null)), table32, "And ");
#line hidden
#line 80
 testRunner.When("I serialize the content object called \'parent\' as \'result\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then("the value called \'result\' should be a json object \'{ \"contentType\": \"application/" +
                        "vnd.corvus.somecontentwithabstractbaseandpocchild\", \"someValue\": \"Hello\", \"child" +
                        "\": { \"someValue\": \"Dolly\" } }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Serialize a polymorphic content object implementing a common base")]
        public virtual void SerializeAPolymorphicContentObjectImplementingACommonBase()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize a polymorphic content object implementing a common base", null, tagsOfScenario, argumentsOfScenario);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue"});
                table33.AddRow(new string[] {
                            "Hello"});
#line 86
 testRunner.Given("I have an instance of a content object called \'item\' with content type \'applicati" +
                        "on/vnd.corvus.somecontentwithbase\'", ((string)(null)), table33, "Given ");
#line hidden
#line 89
 testRunner.When("I serialize the content object called \'item\' as \'result\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
 testRunner.Then("the value called \'result\' should be a json object \'{ \"contentType\": \"application/" +
                        "vnd.corvus.somecontentwithbase\", \"someValue\": \"Hello\" }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Serialize a polymorphic content object implementing a common base with a null pol" +
            "ymorphic child object")]
        [NUnit.Framework.CategoryAttribute("useChildObjects")]
        public virtual void SerializeAPolymorphicContentObjectImplementingACommonBaseWithANullPolymorphicChildObject()
        {
            string[] tagsOfScenario = new string[] {
                    "useChildObjects"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize a polymorphic content object implementing a common base with a null pol" +
                    "ymorphic child object", null, tagsOfScenario, argumentsOfScenario);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue",
                            "Child"});
                table34.AddRow(new string[] {
                            "Hello",
                            "null"});
#line 94
 testRunner.Given("I have an instance of a content object called \'item\' with content type \'applicati" +
                        "on/vnd.corvus.somecontentwithbaseandchild\'", ((string)(null)), table34, "Given ");
#line hidden
#line 97
 testRunner.When("I serialize the content object called \'item\' as \'result\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
 testRunner.Then("the value called \'result\' should be a json object \'{ \"contentType\": \"application/" +
                        "vnd.corvus.somecontentwithbaseandchild\", \"someValue\": \"Hello\" }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Serialize a polymorphic content object implementing a common base with a polymorp" +
            "hic child object")]
        [NUnit.Framework.CategoryAttribute("useChildObjects")]
        public virtual void SerializeAPolymorphicContentObjectImplementingACommonBaseWithAPolymorphicChildObject()
        {
            string[] tagsOfScenario = new string[] {
                    "useChildObjects"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize a polymorphic content object implementing a common base with a polymorp" +
                    "hic child object", null, tagsOfScenario, argumentsOfScenario);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue"});
                table35.AddRow(new string[] {
                            "Dolly"});
#line 102
 testRunner.Given("I have an instance of a content object called \'child\' with content type \'applicat" +
                        "ion/vnd.corvus.somecontentwithbase\'", ((string)(null)), table35, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue",
                            "Child"});
                table36.AddRow(new string[] {
                            "Hello",
                            "{child}"});
#line 105
 testRunner.And("I have an instance of a content object called \'parent\' with content type \'applica" +
                        "tion/vnd.corvus.somecontentwithbaseandchild\'", ((string)(null)), table36, "And ");
#line hidden
#line 108
 testRunner.When("I serialize the content object called \'parent\' as \'result\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 109
 testRunner.Then("the value called \'result\' should be a json object \'{ \"contentType\": \"application/" +
                        "vnd.corvus.somecontentwithbaseandchild\", \"someValue\": \"Hello\", \"child\": { \"conte" +
                        "ntType\": \"application/vnd.corvus.somecontentwithbase\", \"someValue\": \"Dolly\" } }\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Serialize a polymorphic content object implementing a common base with a POC chil" +
            "d object")]
        [NUnit.Framework.CategoryAttribute("useChildObjects")]
        public virtual void SerializeAPolymorphicContentObjectImplementingACommonBaseWithAPOCChildObject()
        {
            string[] tagsOfScenario = new string[] {
                    "useChildObjects"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize a polymorphic content object implementing a common base with a POC chil" +
                    "d object", null, tagsOfScenario, argumentsOfScenario);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue"});
                table37.AddRow(new string[] {
                            "Dolly"});
#line 113
 testRunner.Given("I have an instance of a poc object called \'child\'", ((string)(null)), table37, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue",
                            "Child"});
                table38.AddRow(new string[] {
                            "Hello",
                            "{child}"});
#line 116
 testRunner.And("I have an instance of a content object called \'parent\' with content type \'applica" +
                        "tion/vnd.corvus.somecontentwithbaseandpocchild\'", ((string)(null)), table38, "And ");
#line hidden
#line 119
 testRunner.When("I serialize the content object called \'parent\' as \'result\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 120
 testRunner.Then("the value called \'result\' should be a json object \'{ \"contentType\": \"application/" +
                        "vnd.corvus.somecontentwithbaseandpocchild\", \"someValue\": \"Hello\", \"child\": { \"so" +
                        "meValue\": \"Dolly\" } }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Serialize a poc object with an enum")]
        [NUnit.Framework.CategoryAttribute("useChildObjects")]
        public virtual void SerializeAPocObjectWithAnEnum()
        {
            string[] tagsOfScenario = new string[] {
                    "useChildObjects"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Serialize a poc object with an enum", null, tagsOfScenario, argumentsOfScenario);
#line 123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "SomeValue",
                            "SomeEnum"});
                table39.AddRow(new string[] {
                            "Hello",
                            "ThirdTimeIsTheCharm"});
#line 124
 testRunner.Given("I have an instance of a poc object with enum called \'subject\'", ((string)(null)), table39, "Given ");
#line hidden
#line 127
 testRunner.When("I serialize the content object called \'subject\' as \'result\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 128
 testRunner.Then("the value called \'result\' should be a json object \'{ \"someValue\": \"Hello\", \"someE" +
                        "num\": \"thirdTimeIsTheCharm\" }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
