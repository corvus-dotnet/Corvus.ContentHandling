// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Corvus.Extensions.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("RegisterContent")]
    public partial class RegisterContentFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RegisterContent.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RegisterContent", "\tIn order to create content dynamically by a media type \r\n\tAs a developer\r\n\tI wan" +
                    "t to be able to register and retrieve various kinds of content", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Register and retrieve content")]
        public virtual void RegisterAndRetrieveContent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register and retrieve content", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Explicit content type",
                        "Registration kind"});
            table1.AddRow(new string[] {
                        "ExplicitType1",
                        "application/vnd.endjin.explicittype1",
                        "Singleton"});
            table1.AddRow(new string[] {
                        "ExplicitType2",
                        "application/vnd.endjin.explicittype2",
                        "Singleton"});
            table1.AddRow(new string[] {
                        "ExplicitType1Subtype1",
                        "application/vnd.endjin.explicittype1.subtype1",
                        "Singleton"});
            table1.AddRow(new string[] {
                        "ExplicitType3",
                        "application/vnd.endjin.explicittype3",
                        "Transient"});
            table1.AddRow(new string[] {
                        "ExplicitType4",
                        "application/vnd.endjin.explicittype4",
                        "Transient"});
            table1.AddRow(new string[] {
                        "ExplicitType3Subtype1",
                        "application/vnd.endjin.explicittype3.subtype1",
                        "Transient"});
            table1.AddRow(new string[] {
                        "ExplicitType5",
                        "application/vnd.endjin.explicittype5",
                        "Scoped"});
            table1.AddRow(new string[] {
                        "ExplicitType6",
                        "application/vnd.endjin.explicittype6",
                        "Scoped"});
            table1.AddRow(new string[] {
                        "ExplicitType5Subtype1",
                        "application/vnd.endjin.explicittype5.subtype1",
                        "Scoped"});
            table1.AddRow(new string[] {
                        "ContentType1",
                        "",
                        "Singleton"});
            table1.AddRow(new string[] {
                        "ContentType2",
                        "",
                        "Singleton"});
            table1.AddRow(new string[] {
                        "ContentType1Subtype1",
                        "",
                        "Singleton"});
            table1.AddRow(new string[] {
                        "ContentType3",
                        "",
                        "Transient"});
            table1.AddRow(new string[] {
                        "ContentType4",
                        "",
                        "Transient"});
            table1.AddRow(new string[] {
                        "ContentType3Subtype1",
                        "",
                        "Transient"});
            table1.AddRow(new string[] {
                        "ContentType5",
                        "",
                        "Scoped"});
            table1.AddRow(new string[] {
                        "ContentType6",
                        "",
                        "Scoped"});
            table1.AddRow(new string[] {
                        "ContentType5Subtype1",
                        "",
                        "Scoped"});
#line 7
 testRunner.Given("I have registered the following types", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Content type"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.explicittype1"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.explicittype2"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.explicittype1.subtype1"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.explicittype2.subtype1"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.explicittype3"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.explicittype4"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.explicittype3.subtype1"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.explicittype4.subtype1"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.explicittype5"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.explicittype6"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.explicittype5.subtype1"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.explicittype6.subtype1"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.contenttype1"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.contenttype2"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.contenttype1.subtype1"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.contenttype2.subtype1"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.contenttype3"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.contenttype4"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.contenttype3.subtype1"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.contenttype4.subtype1"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.contenttype5"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.contenttype6"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.contenttype5.subtype1"});
            table2.AddRow(new string[] {
                        "application/vnd.endjin.contenttype6.subtype1"});
#line 27
 testRunner.When("I get the following content", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type"});
            table3.AddRow(new string[] {
                        "ExplicitType1"});
            table3.AddRow(new string[] {
                        "ExplicitType2"});
            table3.AddRow(new string[] {
                        "ExplicitType1Subtype1"});
            table3.AddRow(new string[] {
                        "ExplicitType2"});
            table3.AddRow(new string[] {
                        "ExplicitType3"});
            table3.AddRow(new string[] {
                        "ExplicitType4"});
            table3.AddRow(new string[] {
                        "ExplicitType3Subtype1"});
            table3.AddRow(new string[] {
                        "ExplicitType4"});
            table3.AddRow(new string[] {
                        "ExplicitType5"});
            table3.AddRow(new string[] {
                        "ExplicitType6"});
            table3.AddRow(new string[] {
                        "ExplicitType5Subtype1"});
            table3.AddRow(new string[] {
                        "ExplicitType6"});
            table3.AddRow(new string[] {
                        "ContentType1"});
            table3.AddRow(new string[] {
                        "ContentType2"});
            table3.AddRow(new string[] {
                        "ContentType1Subtype1"});
            table3.AddRow(new string[] {
                        "ContentType2"});
            table3.AddRow(new string[] {
                        "ContentType3"});
            table3.AddRow(new string[] {
                        "ContentType4"});
            table3.AddRow(new string[] {
                        "ContentType3Subtype1"});
            table3.AddRow(new string[] {
                        "ContentType4"});
            table3.AddRow(new string[] {
                        "ContentType5"});
            table3.AddRow(new string[] {
                        "ContentType6"});
            table3.AddRow(new string[] {
                        "ContentType5Subtype1"});
            table3.AddRow(new string[] {
                        "ContentType6"});
#line 53
 testRunner.Then("the results should be of types", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
